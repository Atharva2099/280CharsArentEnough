{"pageProps":{"postData":{"slug":"Monte Carlo Simulation For N Queens Problem","htmlContent":"<h2>Introduction</h2>\n<p>The N-Queens problem is a classic chess puzzle where we need to place N queens on an N×N chessboard such that no two queens threaten each other. A Monte Carlo simulation can help us estimate the complexity of solving this problem using backtracking.</p>\n<h2>Concept: Monte Carlo Method</h2>\n<p>Monte Carlo methods use random sampling to obtain numerical results. In our case, we:</p>\n<ol>\n<li>Randomly explore paths in the state space tree</li>\n<li>Count nodes visited and promising positions</li>\n<li>Estimate total complexity through multiple trials</li>\n</ol>\n<h2>Setup and Dependencies</h2>\n<pre class=\"hljs\"><code>\n<span class=\"hljs-keyword\">import</span> random\n<span class=\"hljs-keyword\">import</span> time\n<span class=\"hljs-keyword\">from</span> statistics <span class=\"hljs-keyword\">import</span> mean, stdev\n<span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np\n\n</code></pre>\n<h2>Core Function: Checking Promising Positions</h2>\n<p>We need to determine if a queen placement is valid (promising) by checking:</p>\n<ul>\n<li>No queen in the same column</li>\n<li>No queen in the diagonals</li>\n</ul>\n<pre class=\"hljs\"><code>\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">promising</span>(<span class=\"hljs-params\">i, j, col</span>):\n    <span class=\"hljs-string\">&quot;&quot;&quot;Check if placing a queen at position (i,j) is promising&quot;&quot;&quot;</span>\n    <span class=\"hljs-keyword\">for</span> k <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(i):\n        <span class=\"hljs-keyword\">if</span> (col[k] == j <span class=\"hljs-keyword\">or</span> <span class=\"hljs-built_in\">abs</span>(col[k] - j) == <span class=\"hljs-built_in\">abs</span>(k - i)):\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">False</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">True</span>\n\n</code></pre>\n<h2>Monte Carlo Estimation</h2>\n<p>The estimation process:</p>\n<ol>\n<li>Start from root node</li>\n<li>At each level:\n<ul>\n<li>Count total nodes</li>\n<li>Find promising positions</li>\n<li>Randomly select one promising child</li>\n</ul>\n</li>\n<li>Continue until no promising children or board is full</li>\n</ol>\n<pre class=\"hljs\"><code>\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">monte_carlo_estimate</span>(<span class=\"hljs-params\">n</span>):\n    <span class=\"hljs-string\">&quot;&quot;&quot;\n    Perform one Monte Carlo estimation for n-Queens problem\n    Returns tuple of (total_nodes, promising_nodes)\n    &quot;&quot;&quot;</span>\n    col = [-<span class=\"hljs-number\">1</span>] * n\n    total_nodes = <span class=\"hljs-number\">1</span>    <span class=\"hljs-comment\"># Root node</span>\n    promising_nodes = <span class=\"hljs-number\">1</span>  <span class=\"hljs-comment\"># Root is promising</span>\n    m = <span class=\"hljs-number\">1</span>\n    mprod = <span class=\"hljs-number\">1</span>\n    i = <span class=\"hljs-number\">0</span>\n    \n    <span class=\"hljs-keyword\">while</span> m != <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">and</span> i != n:\n        mprod = mprod * m\n        current_level_nodes = mprod * n\n        total_nodes += current_level_nodes\n        \n        <span class=\"hljs-comment\"># Find promising children at current level</span>\n        m = <span class=\"hljs-number\">0</span>\n        prom_children = []\n        <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(n):\n            <span class=\"hljs-keyword\">if</span> promising(i, j, col):\n                m += <span class=\"hljs-number\">1</span>\n                prom_children.append(j)\n        \n        promising_nodes += m * mprod\n        \n        <span class=\"hljs-keyword\">if</span> m != <span class=\"hljs-number\">0</span>:\n            j = random.choice(prom_children)\n            col[i] = j\n            i += <span class=\"hljs-number\">1</span>\n    \n    <span class=\"hljs-keyword\">return</span> (total_nodes, promising_nodes)\n\n</code></pre>\n<h2>Running Multiple Trials</h2>\n<p>To get reliable estimates, we run multiple trials and collect statistics:</p>\n<ul>\n<li>Mean values</li>\n<li>Standard deviation</li>\n<li>Min/Max values</li>\n<li>Execution time</li>\n</ul>\n<pre class=\"hljs\"><code>\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">run_monte_carlo_simulation</span>(<span class=\"hljs-params\">n, num_trials=<span class=\"hljs-number\">100</span></span>):\n    <span class=\"hljs-string\">&quot;&quot;&quot;Run multiple Monte Carlo simulations and analyze results&quot;&quot;&quot;</span>\n    total_estimates = []\n    promising_estimates = []\n    start_time = time.time()\n    \n    <span class=\"hljs-keyword\">for</span> _ <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(num_trials):\n        estimate_result = monte_carlo_estimate(n)\n        total_estimates.append(estimate_result[<span class=\"hljs-number\">0</span>])\n        promising_estimates.append(estimate_result[<span class=\"hljs-number\">1</span>])\n    \n    execution_time = time.time() - start_time\n    \n    <span class=\"hljs-keyword\">return</span> {\n        <span class=\"hljs-string\">&#x27;total_nodes&#x27;</span>: {\n            <span class=\"hljs-string\">&#x27;mean&#x27;</span>: mean(total_estimates),\n            <span class=\"hljs-string\">&#x27;std_dev&#x27;</span>: stdev(total_estimates),\n            <span class=\"hljs-string\">&#x27;min&#x27;</span>: <span class=\"hljs-built_in\">min</span>(total_estimates),\n            <span class=\"hljs-string\">&#x27;max&#x27;</span>: <span class=\"hljs-built_in\">max</span>(total_estimates)\n        },\n        <span class=\"hljs-string\">&#x27;promising_nodes&#x27;</span>: {\n            <span class=\"hljs-string\">&#x27;mean&#x27;</span>: mean(promising_estimates),\n            <span class=\"hljs-string\">&#x27;std_dev&#x27;</span>: stdev(promising_estimates),\n            <span class=\"hljs-string\">&#x27;min&#x27;</span>: <span class=\"hljs-built_in\">min</span>(promising_estimates),\n            <span class=\"hljs-string\">&#x27;max&#x27;</span>: <span class=\"hljs-built_in\">max</span>(promising_estimates)\n        },\n        <span class=\"hljs-string\">&#x27;execution_time&#x27;</span>: execution_time,\n        <span class=\"hljs-string\">&#x27;num_trials&#x27;</span>: num_trials,\n        <span class=\"hljs-string\">&#x27;raw_promising&#x27;</span>: promising_estimates\n    }\n\n</code></pre>\n<h2>Main Execution and Analysis</h2>\n<p>Here we:</p>\n<ol>\n<li>Run simulations with different trial sizes</li>\n<li>Collect and display statistics</li>\n<li>Compare with professor’s values</li>\n<li>Calculate overall averages</li>\n</ol>\n<pre class=\"hljs\"><code>\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">main</span>():\n    n = <span class=\"hljs-number\">12</span>  <span class=\"hljs-comment\"># Board size</span>\n    num_trials = [<span class=\"hljs-number\">100</span>, <span class=\"hljs-number\">500</span>, <span class=\"hljs-number\">1000</span>]\n    random.seed(<span class=\"hljs-number\">123</span>)  <span class=\"hljs-comment\"># For reproducibility</span>\n    \n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;\\nMonte Carlo Simulation for <span class=\"hljs-subst\">{n}</span>-Queens Problem&quot;</span>)\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;=&quot;</span> * <span class=\"hljs-number\">60</span>)\n    \n    all_promising_values = []\n    \n    <span class=\"hljs-keyword\">for</span> trials <span class=\"hljs-keyword\">in</span> num_trials:\n        results = run_monte_carlo_simulation(n, trials)\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;\\nResults for <span class=\"hljs-subst\">{trials}</span> trials:&quot;</span>)\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;\\nTotal Nodes:&quot;</span>)\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;Average: <span class=\"hljs-subst\">{results[<span class=\"hljs-string\">&#x27;total_nodes&#x27;</span>][<span class=\"hljs-string\">&#x27;mean&#x27;</span>]:<span class=\"hljs-number\">.2</span>f}</span>&quot;</span>)\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;Standard deviation: <span class=\"hljs-subst\">{results[<span class=\"hljs-string\">&#x27;total_nodes&#x27;</span>][<span class=\"hljs-string\">&#x27;std_dev&#x27;</span>]:<span class=\"hljs-number\">.2</span>f}</span>&quot;</span>)\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;Min: <span class=\"hljs-subst\">{results[<span class=\"hljs-string\">&#x27;total_nodes&#x27;</span>][<span class=\"hljs-string\">&#x27;min&#x27;</span>]:<span class=\"hljs-number\">.2</span>f}</span>&quot;</span>)\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;Max: <span class=\"hljs-subst\">{results[<span class=\"hljs-string\">&#x27;total_nodes&#x27;</span>][<span class=\"hljs-string\">&#x27;max&#x27;</span>]:<span class=\"hljs-number\">.2</span>f}</span>&quot;</span>)\n        \n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;\\nPromising Nodes:&quot;</span>)\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;Average: <span class=\"hljs-subst\">{results[<span class=\"hljs-string\">&#x27;promising_nodes&#x27;</span>][<span class=\"hljs-string\">&#x27;mean&#x27;</span>]:<span class=\"hljs-number\">.2</span>f}</span>&quot;</span>)\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;Standard deviation: <span class=\"hljs-subst\">{results[<span class=\"hljs-string\">&#x27;promising_nodes&#x27;</span>][<span class=\"hljs-string\">&#x27;std_dev&#x27;</span>]:<span class=\"hljs-number\">.2</span>f}</span>&quot;</span>)\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;Min: <span class=\"hljs-subst\">{results[<span class=\"hljs-string\">&#x27;promising_nodes&#x27;</span>][<span class=\"hljs-string\">&#x27;min&#x27;</span>]:<span class=\"hljs-number\">.2</span>f}</span>&quot;</span>)\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;Max: <span class=\"hljs-subst\">{results[<span class=\"hljs-string\">&#x27;promising_nodes&#x27;</span>][<span class=\"hljs-string\">&#x27;max&#x27;</span>]:<span class=\"hljs-number\">.2</span>f}</span>&quot;</span>)\n        \n        all_promising_values.extend(results[<span class=\"hljs-string\">&#x27;raw_promising&#x27;</span>])\n    \n    <span class=\"hljs-comment\"># Overall statistics</span>\n    total_runs = <span class=\"hljs-built_in\">sum</span>(num_trials)\n    overall_mean = mean(all_promising_values)\n    overall_std = stdev(all_promising_values)\n    \n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;\\nOverall Statistics:&quot;</span>)\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;Total runs: <span class=\"hljs-subst\">{total_runs}</span>&quot;</span>)\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;Overall mean promising nodes: <span class=\"hljs-subst\">{overall_mean:<span class=\"hljs-number\">.2</span>f}</span>&quot;</span>)\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;Overall standard deviation: <span class=\"hljs-subst\">{overall_std:<span class=\"hljs-number\">.2</span>f}</span>&quot;</span>)\n    \n    <span class=\"hljs-comment\"># Compare with professor&#x27;s value</span>\n    professors_value = <span class=\"hljs-number\">856000</span>\n    percentage_diff = ((overall_mean - professors_value) / professors_value) * <span class=\"hljs-number\">100</span>\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;\\nPercentage difference from professor&#x27;s value: <span class=\"hljs-subst\">{percentage_diff:<span class=\"hljs-number\">.2</span>f}</span>%&quot;</span>)\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n    main()\n\n</code></pre>\n<h2>Initial Simulation Results</h2>\n<p><img src=\"/280CharsArentEnough/images/n-simulation-result.png\" alt=\"Simulation Results\"></p>\n<h2>Results Analysis</h2>\n<p>When we run this simulation for n=12:</p>\n<ol>\n<li>Our estimates are close to the professor’s values:\n<ul>\n<li>Professor’s value: 8.56 × 10^5</li>\n<li>Our estimated value: ~8.70 × 10^5 (within 2% difference)</li>\n</ul>\n</li>\n<li>The standard deviation shows the variability of the Monte Carlo method</li>\n<li>Larger numbers of trials generally give more stable results</li>\n</ol>\n<h2>Conclusion</h2>\n<p>The Monte Carlo simulation effectively estimates the complexity of the N-Queens problem:</p>\n<ul>\n<li>Provides good approximations of node counts</li>\n<li>Much faster than exhaustive counting</li>\n<li>Helps understand the scale of the problem</li>\n<li>Results align well with theoretical expectations</li>\n</ul>\n<h2>Plots for 4, 8, 12 and 14 Queens problem on a Log scale</h2>\n<p>Analysisng the data:</p>\n<pre class=\"hljs\"><code>\n\t<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">analyze_complexity</span>(<span class=\"hljs-params\">n_values, trials_per_n=<span class=\"hljs-number\">1000</span></span>):\n\t\n\t<span class=\"hljs-string\">&quot;&quot;&quot;Analyze time complexity for different values of n&quot;&quot;&quot;</span>\n\t\n\ttotal_nodes_avg = []\n\t\n\tpromising_nodes_avg = []\n\t\n\texecution_times = []\n\t\n\t<span class=\"hljs-keyword\">for</span> n <span class=\"hljs-keyword\">in</span> n_values:\n\t\n\tstart_time = time.time()\n\t\n\ttrial_totals = []\n\t\n\ttrial_promising = []\n\t\n\t<span class=\"hljs-keyword\">for</span> _ <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(trials_per_n):\n\t\n\ttotal, promising = monte_carlo_estimate(n)\n\t\n\ttrial_totals.append(total)\n\t\n\ttrial_promising.append(promising)\n\t\n\texec_time = time.time() - start_time\n\t\n\ttotal_nodes_avg.append(mean(trial_totals))\n\t\n\tpromising_nodes_avg.append(mean(trial_promising))\n\t\n\texecution_times.append(exec_time)\n\t\n\t<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;\\nResults for n=<span class=\"hljs-subst\">{n}</span>:&quot;</span>)\n\t\n\t<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;Average Total Nodes: <span class=\"hljs-subst\">{mean(trial_totals):,<span class=\"hljs-number\">.2</span>f}</span>&quot;</span>)\n\t\n\t<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;Average Promising Nodes: <span class=\"hljs-subst\">{mean(trial_promising):,<span class=\"hljs-number\">.2</span>f}</span>&quot;</span>)\n\t\n\t<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">f&quot;Execution Time: <span class=\"hljs-subst\">{exec_time:<span class=\"hljs-number\">.4</span>f}</span> seconds&quot;</span>)\n\t\n\t<span class=\"hljs-keyword\">return</span> total_nodes_avg, promising_nodes_avg, execution_times\n</code></pre>\n<p>Plotting the graphs:</p>\n<pre class=\"hljs\"><code>\t<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">plot_complexity_analysis</span>(<span class=\"hljs-params\">n_values, total_nodes, promising_nodes, times</span>):\n\t\n\tfig, (ax1, ax2) = plt.subplots(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, figsize=(<span class=\"hljs-number\">15</span>, <span class=\"hljs-number\">6</span>))\n\t\n\t<span class=\"hljs-comment\"># Plot 1: Nodes vs N (log scale)</span>\n\t\n\tax1.plot(n_values, total_nodes, <span class=\"hljs-string\">&#x27;b-o&#x27;</span>, label=<span class=\"hljs-string\">&#x27;Total Nodes&#x27;</span>)\n\t\n\tax1.plot(n_values, promising_nodes, <span class=\"hljs-string\">&#x27;g-o&#x27;</span>, label=<span class=\"hljs-string\">&#x27;Promising Nodes&#x27;</span>)\n\t\n\tax1.set_yscale(<span class=\"hljs-string\">&#x27;log&#x27;</span>)\n\t\n\tax1.set_title(<span class=\"hljs-string\">&#x27;Growth of Nodes with N\\n(Log Scale)&#x27;</span>, fontsize=<span class=\"hljs-number\">12</span>)\n\t\n\tax1.set_xlabel(<span class=\"hljs-string\">&#x27;N (Board Size)&#x27;</span>, fontsize=<span class=\"hljs-number\">10</span>)\n\t\n\tax1.set_ylabel(<span class=\"hljs-string\">&#x27;Number of Nodes (log scale)&#x27;</span>, fontsize=<span class=\"hljs-number\">10</span>)\n\t\n\tax1.grid(<span class=\"hljs-literal\">True</span>, alpha=<span class=\"hljs-number\">0.3</span>)\n\t\n\tax1.legend()\n\t\n\t<span class=\"hljs-comment\"># Plot 2: Execution Time vs N</span>\n\t\n\tax2.plot(n_values, times, <span class=\"hljs-string\">&#x27;r-o&#x27;</span>, label=<span class=\"hljs-string\">&#x27;Execution Time&#x27;</span>)\n\t\n\tax2.set_title(<span class=\"hljs-string\">&#x27;Execution Time vs N&#x27;</span>, fontsize=<span class=\"hljs-number\">12</span>)\n\t\n\tax2.set_xlabel(<span class=\"hljs-string\">&#x27;N (Board Size)&#x27;</span>, fontsize=<span class=\"hljs-number\">10</span>)\n\t\n\tax2.set_ylabel(<span class=\"hljs-string\">&#x27;Time (seconds)&#x27;</span>, fontsize=<span class=\"hljs-number\">10</span>)\n\t\n\tax2.grid(<span class=\"hljs-literal\">True</span>, alpha=<span class=\"hljs-number\">0.3</span>)\n\t\n\tplt.tight_layout()\n\t\n\tplt.show()\n</code></pre>\n<p>Main Function:</p>\n<pre class=\"hljs\"><code>\t<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">main</span>():\n\t\n\trandom.seed(<span class=\"hljs-number\">123</span>)\n\t\n\tn_values = [<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">14</span>] <span class=\"hljs-comment\"># Different board sizes</span>\n\t\n\t<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Analyzing time complexity for N-Queens problem&quot;</span>)\n\t\n\t<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;=&quot;</span> * <span class=\"hljs-number\">60</span>)\n\t\n\ttotal_nodes, promising_nodes, exec_times = analyze_complexity(n_values)\n\t\n\tplot_complexity_analysis(n_values, total_nodes, promising_nodes, exec_times)\n\t\n\t  \n\t\n\t<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&quot;__main__&quot;</span>:\n\t\n\tmain()\n\n</code></pre>\n<h2>Complexity Analysis Results</h2>\n<p><img src=\"/280CharsArentEnough/images/n-queen-plot.png\" alt=\"Complexity Analysis\"></p>\n<h2>Code</h2>\n<p>Find the complete implementation on <a href=\"https://github.com/Atharva2099/AssignmentsButFun/blob/main/CSC510/Monte%20Carlo%20Simulation%20for%20N-Queens%20Using%20Backtracking%20and%20pruning.ipynb\">GitHub</a>.</p>\n<hr>\n<p>GitHub: <a href=\"https://github.com/Atharva2099\">@FullMLAlchemist</a>\nTwitter: <a href=\"https://x.com/attharave\">@Attharave</a></p>\n","title":"Monte Carlo Simulation For N Queens Problem","date":"2024-11-28","categories":["Monte Carlo","BackTracking","N-Queens","Statistics","visualisation"],"image":"/images/monte-carlo-simulation-for-n-queens-problem.png","summary":""}},"__N_SSG":true}