{"pageProps":{"postData":{"slug":"Easy Quizzes","htmlContent":"<h1>Automating Study Material Creation with Retrieval-Augmented Generation (RAG)</h1>\n<h3>Overview</h3>\n<p>Creating effective study materials from lengthy notes or research papers can be time-consuming. As someone passionate about machine learning and productivity tools, I developed <strong>EasyQuizzes</strong>, an application that uses Retrieval-Augmented Generation (RAG) to turn notes or PDFs into custom flashcards. This blog walks you through how I implemented RAG and structured the app to automate the process.</p>\n<h3>Problem and Motivtion</h3>\n<p>Creating flashcards manually from notes often requires significant time and effort. Inspired by my experience with Quizlet, I wanted to streamline this task by building a tool that uses AI to extract key information and generate flashcards instantly.</p>\n<h3>Solution Architecture</h3>\n<p><strong>1. Setting Up RAG with ChromaDB and LLaMA3</strong>\nTo implement RAG:</p>\n<ul>\n<li><strong>LLM Selection</strong>: I used <strong>Metaâ€™s LLaMA3.2-3B-preview</strong> via Groq API to ensure low latency and efficient processing.</li>\n<li><strong>Embedding and Retrieval</strong>: Using <strong>ChromaDB</strong>, I created vector embeddings for notes, allowing quick retrieval of relevant chunks.</li>\n</ul>\n<p><strong>2. Core Components</strong>\n<strong>Document Parsing and Chunking:</strong>\nUsing <strong>PyPDF2</strong> and <strong>OCR</strong>, my app converts handwritten or scanned notes into text. Each document is chunked into manageable sections for better LLM performance and stored as vectors in ChromaDB.</p>\n<p><strong>RAG Process</strong></p>\n<p>The RAG approach includes:</p>\n<ol>\n<li><strong>Retrieving</strong> relevant text chunks based on a prompt.</li>\n<li><strong>Generating</strong> responses by feeding retrieved information to the LLaMA3 model.</li>\n</ol>\n<p><strong>3. Key Code Snippets</strong></p>\n<p><strong>Document Parsing and Chunk Storage</strong></p>\n<pre class=\"hljs\"><code>\n<span class=\"hljs-keyword\">import</span> PyPDF2\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">parse_pdf</span>(<span class=\"hljs-params\">file_path</span>):\n    pdf_reader = PyPDF2.PdfFileReader(<span class=\"hljs-built_in\">open</span>(file_path, <span class=\"hljs-string\">&quot;rb&quot;</span>))\n    text_content = <span class=\"hljs-string\">&quot;&quot;</span>\n    <span class=\"hljs-keyword\">for</span> page <span class=\"hljs-keyword\">in</span> pdf_reader.pages:\n        text_content += page.extract_text()\n    <span class=\"hljs-keyword\">return</span> text_content\n</code></pre>\n<p><strong>Flashcard Generation</strong></p>\n<pre class=\"hljs\"><code>\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">generate_flashcards</span>(<span class=\"hljs-params\">topic, document_text</span>):\n    retrieved_chunks = chromadb.retrieve(topic)\n    flashcards = []\n    <span class=\"hljs-keyword\">for</span> chunk <span class=\"hljs-keyword\">in</span> retrieved_chunks:\n        question, answer = llm.generate_flashcard(chunk)\n        flashcards.append((question, answer))\n    <span class=\"hljs-keyword\">return</span> flashcards\n</code></pre>\n<p><strong>4. Key Features and Benefits</strong></p>\n<ul>\n<li><strong>Custom Flashcards in Seconds</strong>: Reduces study prep time by automating question generation.</li>\n<li><strong>Accuracy with RAG</strong>: By using retrieval, flashcards focus on relevant information, increasing the quality of study material.</li>\n<li><strong>Local Storage and Privacy</strong>: Flashcards and data are stored locally for student privacy and offline access.</li>\n</ul>\n<h2>Challenges and Learnings</h2>\n<ol>\n<li><strong>Embedding Quality</strong>: Choosing the right embeddings is crucial for retrieving relevant text chunks accurately.</li>\n<li><strong>Latency</strong>: Using the Groq API and an optimized Conda environment helped manage model inference times effectively.</li>\n<li><strong>Chunk Size</strong>: Balancing chunk size was essential to avoid missing context while keeping retrieval efficient.</li>\n</ol>\n<h2>Future Improvements</h2>\n<ol>\n<li><strong>Multi-language Support</strong>: Given my background in Indic languages, I plan to extend this tool to support content in Hindi and Marathi.</li>\n<li><strong>Mobile App Version</strong>: Allowing flashcard creation on the go for a more seamless study experience.</li>\n</ol>\n<h2>Conclusion</h2>\n<p>EasyQuizzes demonstrates how retrieval-augmented generation can save time and enhance learning. With AI, students can now spend more time understanding concepts rather than preparing notes.</p>\n<p>Checkout EasyQuizzes at : <a href=\"https://github.com/Atharva2099/EasyQuizzes\">EasyQuizzes</a></p>\n<hr>\n<p>GitHub: <a href=\"https://github.com/Atharva2099\">@FullMLAlchemist</a>\nTwitter: <a href=\"https://x.com/attharave\">@Attharave</a></p>\n","title":"EasyQuizzes AI powered FlashCard Generator","date":"2024-11-07","categories":["RAG","LLM","ChromaDB","Hackathon"],"image":"/images/easy quizzes.png","summary":""}},"__N_SSG":true}